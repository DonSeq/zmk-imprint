#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row; };

    behaviors {
        shiftdance: shiftdance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTDANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        lsk: lsk {
            compatible = "zmk,behavior-sticky-key";
            label = "LSK";
            bindings = <&kp>;
            #binding-cells = <1>;
            lazy;
            ignore-modifiers;
            release-after-ms = <5000>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp LS(GRAVE)     &kp F1         &kp F2          &kp F3    &kp F4                &kp F5                        &kp F6    &kp F7                 &kp F8         &kp F9           &kp F10           &kp F11
&kp GRAVE         &kp N1         &kp N2          &kp N3    &kp N4                &kp N5                        &kp N6    &kp N7                 &kp N8         &kp N9           &kp N0            &kp PIPE
&kp TAB           &kp Q          &kp W           &kp E     &kp R                 &kp T                         &kp Y     &kp U                  &kp I          &kp O            &kp P             &kp BSLH
&mt LCTRL ESCAPE  &kp A          &kp S           &kp D     &kp F                 &kp G                         &kp H     &kp J                  &kp K          &kp L            &kp SEMI          &kp SQT
&shiftdance       &kp Z          &kp X           &kp C     &kp V                 &kp B                         &kp N     &kp M                  &kp COMMA      &kp DOT          &kp FSLH          &kp RSHFT
&kp LCTRL         &kp LESS_THAN  &kp LEFT_BRACE  &kp LBKT  &kp LEFT_PARENTHESIS                                          &kp RIGHT_PARENTHESIS  &kp RBKT       &kp RIGHT_BRACE  &kp GREATER_THAN  &kp RCTRL
                                                           &kp LEFT_CONTROL      &kp LEFT_SHIFT  &kp DELETE    &mkp MB1  &mkp MB2               &kp SPACE
                                                           &kp BSPC              &kp SPACE       &kp ENTER     &kp DEL   &kp ENTER              &kp BACKSPACE
            >;
        };

        number_motions {
            bindings = <
&bootloader  &studio_unlock      &trans          &kp C_MUTE       &kp C_VOL_DN  &kp C_VOLUME_UP            &rgb_ug RGB_TOG  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &trans
&trans       &trans              &trans          &trans           &trans        &trans                     &trans           &trans           &trans           &trans           &trans           &trans
&trans       &kp PAGE_UP         &kp HOME        &kp UP_ARROW     &kp END       &kp PAGE_DOWN              &kp MINUS        &kp N7           &kp N8           &kp N9           &trans           &trans
&trans       &kp LC(LEFT_ARROW)  &kp LEFT_ARROW  &kp DOWN_ARROW   &kp RIGHT     &kp LC(RIGHT)              &kp EQUAL        &kp N4           &kp N5           &kp N6           &trans           &trans
&trans       &lsk LEFT_GUI       &lsk LEFT_ALT   &lsk LEFT_SHIFT  &lsk LCTRL    &trans                     &kp PLUS         &kp N1           &kp N2           &kp N3           &kp ENTER        &trans
&trans       &kp LEFT_GUI        &trans          &trans           &trans                                                    &kp N0           &kp N0           &kp DOT          &kp ENTER        &trans
                                                                  &trans        &trans           &trans    &trans           &trans           &trans
                                                                  &trans        &trans           &trans    &trans           &trans           &kp N0
            >;
        };

        system {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                            &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
